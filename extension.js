// ██████████████ ██████  ██████ ████████████████   ██████████ 
// ██          ██ ██  ██  ██  ██ ██            ██   ██      ██ 
// ██  ██████████ ██  ██  ██  ██ ██  ████████  ██   ████  ████ 
// ██  ██         ██  ██  ██  ██ ██  ██    ██  ██     ██  ██   
// ██  ██████████ ██  ██  ██  ██ ██  ████████  ██     ██  ██   
// ██          ██ ██  ██  ██  ██ ██            ██     ██  ██   
// ██████████  ██ ██  ██  ██  ██ ██  ██████  ████     ██  ██   
//         ██  ██ ██  ██  ██  ██ ██  ██  ██  ██       ██  ██   
// ██████████  ██ ██  ██████  ██ ██  ██  ██  ██████ ████  ████ 
// ██          ██ ██          ██ ██  ██  ██      ██ ██      ██ 
// ██████████████ ██████████████ ██████  ██████████ ██████████ 

// ██████████████████ ██████████████ ████████████████   ██████████████ 
// ██              ██ ██          ██ ██            ██   ██          ██ 
// ████████████    ██ ██  ██████████ ██  ████████  ██   ██  ██████  ██ 
//         ████  ████ ██  ██         ██  ██    ██  ██   ██  ██  ██  ██ 
//       ████  ████   ██  ██████████ ██  ████████  ██   ██  ██  ██  ██ 
//     ████  ████     ██          ██ ██            ██   ██  ██  ██  ██ 
//   ████  ████       ██  ██████████ ██  ██████  ████   ██  ██  ██  ██ 
// ████  ████         ██  ██         ██  ██  ██  ██     ██  ██  ██  ██ 
// ██    ████████████ ██  ██████████ ██  ██  ██  ██████ ██  ██████  ██ 
// ██              ██ ██          ██ ██  ██  ██      ██ ██          ██ 
// ██████████████████ ██████████████ ██████  ██████████ ██████████████ 

// ██████████████ ██████████████ ██████          ██████ ██████████████ 
// ██          ██ ██          ██ ██  ██████████  ██  ██ ██          ██ 
// ██  ██████████ ██  ██████  ██ ██          ██  ██  ██ ██████  ██████ 
// ██  ██         ██  ██  ██  ██ ██  ██████  ██  ██  ██     ██  ██     
// ██  ██████████ ██  ██  ██  ██ ██  ██  ██  ██  ██  ██     ██  ██     
// ██          ██ ██  ██  ██  ██ ██  ██  ██  ██  ██  ██     ██  ██     
// ██  ██████████ ██  ██  ██  ██ ██  ██  ██  ██  ██  ██     ██  ██     
// ██  ██         ██  ██  ██  ██ ██  ██  ██  ██████  ██     ██  ██     
// ██  ██         ██  ██████  ██ ██  ██  ██          ██     ██  ██     
// ██  ██         ██          ██ ██  ██  ██████████  ██     ██  ██     
// ██████         ██████████████ ██████          ██████     ██████     


const vscode = require('vscode');

function activate(context) {
  let disposable = vscode.commands.registerCommand('extension.convertText', function () {
    const editor = vscode.window.activeTextEditor;
    if (editor) {
      const selection = editor.selection;
      const selectedText = editor.document.getText(selection);
      const convertedText = convertText(selectedText, editor.document.languageId);
      editor.edit(builder => {
        builder.replace(selection, convertedText);
      });
    }
  });

  context.subscriptions.push(disposable);
}

function convertText(text, languageId) {
  const fontMapping = {
    "A": [
      "██████████████",
      "██          ██",
      "██  ██████  ██",
      "██  ██  ██  ██",
      "██  ██████  ██",
      "██          ██",
      "██  ██████  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██████  ██████"
    ],
    "B": [
      "██████████████  ",
      "██          ██  ",
      "██  ██████  ██  ",
      "██  ██  ██  ██  ",
      "██  ██████  ████",
      "██            ██",
      "██  ████████  ██",
      "██  ██    ██  ██",
      "██  ████████  ██",
      "██            ██",
      "████████████████"
    ],
    "C": [
      "██████████████",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██        ",
      "██  ██        ",
      "██  ██        ",
      "██  ██        ",
      "██  ██████████",
      "██          ██",
      "██████████████"
    ],
    "D": [
      "████████████  ",
      "██        ████",
      "██  ████    ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ████    ██",
      "██        ████",
      "████████████  "
    ],
    "E": [
      "██████████████",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██████████",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██████████",
      "██          ██",
      "██████████████"
    ],
    "F": [
      "██████████████",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██████████",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██        ",
      "██  ██        ",
      "██████        "
    ],
    "G": [
      "██████████████",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██        ",
      "██  ██  ██████",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██████  ██",
      "██          ██",
      "██████████████"
    ],
    "H": [
      "██████  ██████",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██████  ██",
      "██          ██",
      "██  ██████  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██████  ██████"
    ],
    "I": [
      "██████████",
      "██      ██",
      "████  ████",
      "  ██  ██  ",
      "  ██  ██  ",
      "  ██  ██  ",
      "  ██  ██  ",
      "  ██  ██  ",
      "████  ████",
      "██      ██",
      "██████████"
    ],
    "J": [
      "        ██████",
      "        ██  ██",
      "        ██  ██",
      "        ██  ██",
      "        ██  ██",
      "        ██  ██",
      "██████  ██  ██",
      "██  ██  ██  ██",
      "██  ██████  ██",
      "██          ██",
      "██████████████"
    ],
    "K": [
      " ██████  ████████ ",
      " ██  ██  ██    ██ ",
      " ██  ██  ██  ████ ",
      " ██  ██  ██  ██   ",
      " ██  ██████  ██   ",
      " ██          ██   ",
      " ██  ██████  ██   ",
      " ██  ██  ██  ██   ",
      " ██  ██  ██  ████ ",
      " ██  ██  ██    ██ ",
      " ██████  ████████ "
    ],
    "L": [
      "██████         ",
      "██  ██         ",
      "██  ██         ",
      "██  ██         ",
      "██  ██         ",
      "██  ██         ",
      "██  ██         ",
      "██  ██         ",
      "██  ██████████ ",
      "██          ██ ",
      "██████████████ "
    ],
    "M": [
      "██████          ██████",
      "██  ██████████████  ██",
      "██                  ██",
      "██  ██████  ██████  ██",
      "██  ██  ██  ██  ██  ██",
      "██  ██  ██  ██  ██  ██",
      "██  ██  ██████  ██  ██",
      "██  ██          ██  ██",
      "██  ██          ██  ██",
      "██  ██          ██  ██",
      "██████          ██████"
    ],
    "N": [
      "██████          ██████",
      "██  ██████████  ██  ██",
      "██          ██  ██  ██",
      "██  ██████  ██  ██  ██",
      "██  ██  ██  ██  ██  ██",
      "██  ██  ██  ██  ██  ██",
      "██  ██  ██  ██  ██  ██",
      "██  ██  ██  ██████  ██",
      "██  ██  ██          ██",
      "██  ██  ██████████  ██",
      "██████          ██████"
    ],
    "O": [
      "██████████████",
      "██          ██",
      "██  ██████  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██████  ██",
      "██          ██",
      "██████████████"
    ],
    "P": [
      "██████████████",
      "██          ██",
      "██  ██████  ██",
      "██  ██  ██  ██",
      "██  ██████  ██",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██        ",
      "██  ██        ",
      "██████        "
    ],
    "Q": [
      "██████████████  ",
      "██          ██  ",
      "██  ██████  ██  ",
      "██  ██  ██  ██  ",
      "██  ██  ██  ██  ",
      "██  ██  ██  ██  ",
      "██  ██  ██  ██  ",
      "██  ██  ██  ██  ",
      "██  ██████  ████",
      "██            ██",
      "████████████████"
    ],
    "R": [
      "████████████████  ",
      "██            ██  ",
      "██  ████████  ██  ",
      "██  ██    ██  ██  ",
      "██  ████████  ██  ",
      "██            ██  ",
      "██  ██████  ████  ",
      "██  ██  ██  ██    ",
      "██  ██  ██  ██████",
      "██  ██  ██      ██",
      "██████  ██████████"
    ],
    "S": [
      "██████████████",
      "██          ██",
      "██  ██████████",
      "██  ██        ",
      "██  ██████████",
      "██          ██",
      "██████████  ██",
      "        ██  ██",
      "██████████  ██",
      "██          ██",
      "██████████████"
    ],
    "T": [
      "██████████████",
      "██          ██",
      "██████  ██████",
      "    ██  ██    ",
      "    ██  ██    ",
      "    ██  ██    ",
      "    ██  ██    ",
      "    ██  ██    ",
      "    ██  ██    ",
      "    ██  ██    ",
      "    ██████    "
    ],
    "U": [
      "██████  ██████",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██  ██  ██",
      "██  ██████  ██",
      "██          ██",
      "██████████████"
    ],
    "V": [
      "██████  ██████ ",
      "██  ██  ██  ██ ",
      "██  ██  ██  ██ ",
      "██  ██  ██  ██ ",
      "██  ██  ██  ██ ",
      "██  ██  ██  ██ ",
      "██  ██  ██  ██ ",
      "██    ██    ██ ",
      "████      ████ ",
      "  ████  ████   ",
      "    ██████     "
    ],
    "W": [
      "██████          ██████",
      "██  ██          ██  ██",
      "██  ██          ██  ██",
      "██  ██          ██  ██",
      "██  ██  ██████  ██  ██",
      "██  ██  ██  ██  ██  ██",
      "██  ██  ██  ██  ██  ██",
      "██  ██████  ██████  ██",
      "██                  ██",
      "██  ██████  ██████  ██",
      "██████  ██████  ██████"
    ],
    "X": [
      "█████████  ████████",
      "██    ██  ██    ██",
      "████  ██  ██  ████",
      "  ██    ██    ██  ",
      "  ████      ████  ",
      "    ██      ██    ",
      "  ████      ████  ",
      "  ██    ██    ██  ",
      "████  ██  ██  ████",
      "██    ██  ██    ██",
      "█████████  ████████"
    ],
    "Y": [
      "████████  ████████",
      "██    ██  ██    ██",
      "████  ██  ██  ████",
      "  ██    ██    ██  ",
      "  ████      ████  ",
      "    ████  ████    ",
      "      ██  ██      ",
      "      ██  ██      ",
      "      ██  ██      ",
      "      ██  ██      ",
      "      ██████      "
    ],
    "Z": [
      "██████████████████",
      "██              ██",
      "████████████    ██",
      "        ████  ████",
      "      ████  ████  ",
      "    ████  ████    ",
      "  ████  ████      ",
      "████  ████        ",
      "██    ████████████",
      "██              ██",
      "██████████████████"
    ]
  };

  const commentStart = getCommentStartSign(languageId);
  const commentEnd = getCommentEndSign(languageId);
  const convertedLines = [];

  for (let i = 0; i < 11; i++) {
    let convertedLine = commentStart;
    for (let j = 0; j < text.length; j++) {
      const letter = text[j].toUpperCase();
      if (fontMapping.hasOwnProperty(letter)) {
        convertedLine += fontMapping[letter][i] + ' ';
      } else {
        convertedLine += '         ';
      }
    }
    convertedLines.push(convertedLine);
  }

  convertedLines.push(commentEnd);
  return convertedLines.join('\n');
}

function getCommentStartSign(languageId) {
  switch (languageId) {
    case 'javascript':
    case 'typescript':
      return '// ';
    case 'python':
      return '# ';
    case 'html':
      return '<!-- ';
    case 'java':
      return '// ';
    case 'c':
    case 'cpp':
    case 'csharp':
    case 'objective-c':
      return '/* ';
    case 'php':
      return '// ';
    case 'ruby':
      return '# ';
    case 'swift':
      return '// ';
    case 'go':
      return '// ';
    case 'rust':
      return '// ';
    case 'kotlin':
      return '// ';
    case 'scala':
      return '// ';
    case 'perl':
      return '# ';
    case 'lua':
      return '-- ';
    case 'r':
      return '# ';
    case 'bash':
      return '# ';
    case 'powershell':
      return '# ';
    case 'sql':
      return '-- ';
    default:
      return '';
  }
}

function getCommentEndSign(languageId) {
  switch (languageId) {
    case 'html':
      return ' -->';
    default:
      return '';
  }
}


function deactivate() { }

module.exports = {
  activate,
  deactivate
};